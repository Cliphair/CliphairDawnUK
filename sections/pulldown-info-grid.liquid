{% assign columns_desktop = section.settings.columns_desktop | default: 4 %}
{% assign columns_mobile = section.settings.columns_mobile | default: 2 %}

<style>
  .grid {
    align-items: stretch;
    --grid-mobile-horizontal-spacing: 10px;
    --grid-mobile-vertical-spacing: 10px;
    --grid-desktop-horizontal-spacing: 20px;
    --grid-desktop-vertical-spacing: 20px;
  }

  .grid__item details,
  .grid__item summary,
  .grid__item > * {
    height: 100%;
  }

  .grid__item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
    margin: 0;
  }

  .grid__item--pulldown {
    grid-column: 1 / -1;
    animation: fadeIn 0.3s ease;
    width: 100% !important;
    max-width: unset !important;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .pulldown-inner .h2 {
    margin: 0;
  }

  .pulldown-inner .grid {
    align-items: stretch;
  }

  .pulldown-inner .grid__item > div {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .pulldown-inner .grid__item > div ul {
    list-style-position: inside;
    padding: 0;
  }

  .pulldown-inner .grid__item img {
    width: 100%;
    height: auto;
    aspect-ratio: 1;
    object-fit: cover;
  }
</style>

<div class="color-{{ section.settings.color_scheme }} gradient">
  <div class="page-width section-{{ section.id }}-padding{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}">
    <ul
      class="grid main-grid grid--{{ columns_desktop }}-col-desktop grid--{{ columns_mobile }}-col-tablet-down"
      role="list"
      data-columns-mobile="{{ columns_mobile }}"
      data-columns-desktop="{{ columns_desktop }}"
    >
      {% for block in section.blocks %}
        <li class="grid__item main-grid__item">
          {% case block.type %}
            {% when 'pulldown' %}
              <div class="pulldown-opener" data-pulldown-id="PulldownElement-{{ section.id }}-{{ forloop.index }}">
                <img src="{{ block.settings.image | image_url }}">
              </div>
              <div
                id="PulldownElement-{{ section.id }}-{{ forloop.index }}"
                class="pulldown-content hidden"
                style="display:none;"
              >
                <div class="pulldown-inner">
                  <p class="h2 center">{{ block.settings.pulldown.title }}</p>
                  <div class="center">{{ block.settings.pulldown.introduction | metafield_tag }}</div>
                  <ul
                    class="grid grid--{{ columns_desktop }}-col-desktop grid--{{ columns_mobile }}-col-tablet-down"
                    role="list"
                  >
                    {% for element in block.settings.pulldown.elements.value %}
                      <li class="grid__item">
                        <div>
                          <img src="{{ element.image | image_url }}">
                          <div>
                            <div>
                              <p class="h3">{{ element.title }}</p>
                              <ul>
                                {% for feature in element.features.value %}
                                  <li>{{ feature }}</li>
                                {% endfor %}
                              </ul>
                            </div>
                            {% if element.url.value %}
                              <a class="button" href="{{ element.url.value }}">Learn more</a>
                            {% endif %}
                          </div>
                        </div>
                      </li>
                    {% endfor %}
                  </ul>
                </div>
              </div>
            {% when 'url' %}
              <a href="{{ block.settings.url }}">
                <img src="{{ block.settings.image | image_url }}">
              </a>
          {% endcase %}
        </li>
      {% endfor %}
    </ul>
  </div>
</div>

{% comment %}
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const pulldownOpeners = document.querySelectorAll('.pulldown-opener');

      pulldownOpeners.forEach((opener) => {
        opener.addEventListener('click', (event) => {
          console.log('clicked', event.target.closest('.pulldown-opener'));
          createPulldown(event.target.closest('.pulldown-opener'));
        });
      });

      function createPulldown(opener) {
        const parent = opener.closest('.grid');
        const totalElements = parent.querySelectorAll('.grid__item').length;
        const columns = window.screen.width < 990 ? parent.dataset.columnsMobile : parent.dataset.columnsDesktop;

        const totlaRows = Math.ceil(totalElements / columns);

        console.log(parent);
        console.log(totalElements);
        console.log(columns);
        console.log(totlaRows);

        const li = document.createElement('li');
        li.innerHTML = opener.querySelector('pulldown-content').innerHTML;
        console.log(li);
      }
    });
  </script>
{% endcomment %}
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const pulldownOpeners = document.querySelectorAll('.pulldown-opener');

    pulldownOpeners.forEach((opener) => {
      opener.addEventListener('click', () => {
        console.log('test');
        const grid = opener.closest('ul.main-grid');
        const columns =
          window.innerWidth < 990 ? parseInt(grid.dataset.columnsMobile) : parseInt(grid.dataset.columnsDesktop);
        const items = [...grid.querySelectorAll('.main-grid__item')];
        const openerItem = opener.closest('.main-grid__item');
        const index = items.indexOf(openerItem);
        const row = Math.floor(index / columns);
        const insertAfterIndex = Math.min((row + 1) * columns - 1, items.length - 1);

        // Remove any existing pulldown rows
        grid.querySelectorAll('.grid__item--pulldown').forEach((el) => el.remove());

        const pulldownId = opener.dataset.pulldownId;
        const contentEl = document.getElementById(pulldownId);
        if (!contentEl) return;

        const li = document.createElement('li');
        li.classList.add('grid__item', 'grid__item--pulldown');
        li.innerHTML = contentEl.innerHTML;

        items[insertAfterIndex].after(li);
      });
    });
  });
</script>

{% schema %}
{
  "name": "Pulldown info grid",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [],
  "blocks": [
    {
      "type": "pulldown",
      "name": "Pulldown element",
      "settings": [
        {
          "type": "image_picker",
          "label": "Image",
          "id": "image"
        },
        {
          "type": "metaobject",
          "id": "pulldown",
          "label": "Pulldown object",
          "metaobject_type": "pulldown_info_grid_element"
        }
      ]
    },
    {
      "type": "url",
      "name": "Url element",
      "settings": [
        {
          "type": "image_picker",
          "label": "Image",
          "id": "image"
        },
        {
          "type": "url",
          "id": "url",
          "label": "Url link"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Pulldown info grid"
    }
  ]
}
{% endschema %}

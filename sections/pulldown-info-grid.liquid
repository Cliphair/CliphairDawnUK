{% assign columns_desktop = section.settings.columns_desktop | default: 4 %}
{% assign columns_mobile = section.settings.columns_mobile | default: 2 %}

<style>
  pulldown-container .grid {
    align-items: stretch;
    --grid-mobile-horizontal-spacing: 10px;
    --grid-mobile-vertical-spacing: 10px;
    --grid-desktop-horizontal-spacing: 20px;
    --grid-desktop-vertical-spacing: 20px;
  }

  pulldown-container .main-grid {
    max-width: var(--page-width);
    margin-right: auto;
    margin-left: auto;
  }

  pulldown-container .grid__item > * {
    height: 100%;
    cursor: pointer;
  }

  pulldown-container .grid__item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
    margin: 0;
  }

  pulldown-container .grid__item--pulldown {
    grid-column: 1 / -1;
    animation: fadeIn 0.3s ease;
    width: 100% !important;
    max-width: unset !important;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  pulldown-container .pulldown-content__inner * {
    letter-spacing: -5%;
  }

  pulldown-container .pulldown-content__inner .h2 {
    margin: 2rem 0 0;
  }

  pulldown-container .pulldown-content__inner .grid:not(.slider) {
    align-items: stretch;
    margin: 2rem 0;
    justify-content: center;
  }

  pulldown-container .pulldown-content__inner .pulldown__card {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    position: relative;
    border: 1px solid rgba(var(--color-foreground), 0.5);
  }

  pulldown-container .pulldown-content__inner .pulldown__card-bottom {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    padding: 1.5rem;
  }

  pulldown-container .pulldown-content__inner .pulldown__card-bottom .h4 {
    margin: 0;
  }

  pulldown-container .pulldown-content__inner .pulldown__card-bottom ul {
    list-style-position: inside;
    list-style-type: disc;
    padding: 0;
    margin: 1.5rem 0;
    font-size: 1.2rem;
  }

  @media screen and (min-width: 990px) {
    pulldown-container .pulldown-content__inner .pulldown__card-bottom ul {
      font-size: 1.5rem;
    }
  }

  pulldown-container .pulldown-content__inner .pulldown__card-bottom .button {
    min-height: unset;
    min-width: unset;
    padding: 0.75rem 1rem;
  }

  pulldown-container .pulldown-content__inner .grid__item img {
    width: 100%;
    height: auto;
    aspect-ratio: 1;
    object-fit: cover;
  }

  @media screen and (min-width: {{ settings.page_width }}px) {
    pulldown-container .main-grid {
      padding: 0 5rem;
    }

    pulldown-container .pulldown-content__inner.page-width {
      padding: 0;
    }
  }
</style>

{% assign product_grid = section.blocks | where: 'type', 'product-grid' %}
{% if product_grid.size >= 1 %}
  {{ 'component-card.css' | asset_url | stylesheet_tag }}
  {{ 'component-price.css' | asset_url | stylesheet_tag }}

  {{ 'featured-collection.css' | asset_url | stylesheet_tag }}

  {{ 'component-slider.css' | asset_url | stylesheet_tag }}
  {{ 'template-collection.css' | asset_url | stylesheet_tag }}
{% endif %}

<pulldown-container class="color-{{ section.settings.color_scheme }} gradient">
  <div class="section-{{ section.id }}-padding{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}">
    <ul
      class="grid main-grid grid--{{ columns_desktop }}-col-desktop grid--{{ columns_mobile }}-col-tablet-down"
      role="list"
      data-columns-mobile="{{ columns_mobile }}"
      data-columns-desktop="{{ columns_desktop }}"
    >
      {% for block in section.blocks %}
        <li class="grid__item main-grid__item">
          {% case block.type %}
            {% when 'product-grid' %}
              {%- if block.settings.enable_quick_add -%}
                {{ 'quick-add.css' | asset_url | stylesheet_tag }}
                <script src="{{ 'quick-add.js' | asset_url }}" defer="defer"></script>
                <script src="{{ 'product-form.js' | asset_url }}" defer="defer"></script>
              {%- endif -%}
              {%- liquid
                assign products_to_display = block.settings.collection.all_products_count

                if block.settings.collection.all_products_count > block.settings.products_to_show
                  assign products_to_display = block.settings.products_to_show
                  assign more_in_collection = true
                endif

                assign columns_mobile_int = block.settings.columns_mobile | plus: 0
                assign show_mobile_slider = false
                if block.settings.swipe_on_mobile and products_to_display > columns_mobile_int
                  assign show_mobile_slider = true
                endif

                assign show_desktop_slider = false
                if block.settings.enable_desktop_slider and products_to_display > block.settings.columns_desktop
                  assign show_desktop_slider = true
                endif
              -%}

              <div
                class="pulldown-opener"
                role="button"
                tabindex="0"
                aria-expanded="false"
                aria-controls="PulldownElement-{{ section.id }}-{{ forloop.index }}"
                data-pulldown-id="PulldownElement-{{ section.id }}-{{ forloop.index }}"
              >
                {% assign img = block.settings.image %}
                <img
                  src="{{ img | image_url: width: 400 }}"
                  srcset="
                    {{ img | image_url: width: 320 }} 320w,
                    {{ img | image_url: width: 480 }} 480w,
                    {{ img | image_url: width: 768 }} 768w,
                    {{ img | image_url: width: 1024 }} 1024w,
                    {{ img | image_url: width: 1440 }} 1440w
                  "
                  sizes="(max-width: 749px) calc(50vw - 1.5rem), (max-width: 989px) calc(50vw - 5rem), (max-width: 1399px) 25vw, calc(25vw - 2.5rem)"
                  width="{{ img.width }}"
                  height="{{ img.height }}"
                  alt="{{ img.alt | escape }}"
                  loading="lazy"
                  decoding="async"
                >
              </div>

              <template id="PulldownElement-{{ section.id }}-{{ forloop.index }}">
                <div class="pulldown-content__inner page-width">
                  <p class="h2 center">{{ block.settings.title }}</p>
                  <div class="center">{{ block.settings.introduction }}</div>

                  <slider-component class="section-featured-collection slider-mobile-gutter slider-component-full-width{% if show_desktop_slider %} slider-component-desktop{% endif %}{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}">
                    <ul
                      id="Slider-{{ block.id }}"
                      class="grid product-grid contains-card contains-card--product{% if settings.card_style == 'standard' %} contains-card--standard{% endif %} grid--{{ block.settings.columns_desktop }}-col-desktop{% if block.settings.collection == blank %} grid--2-col-tablet-down{% else %} grid--{{ block.settings.columns_mobile }}-col-tablet-down{% endif %}{% if show_mobile_slider or show_desktop_slider %} slider{% if show_desktop_slider %} slider--desktop{% endif %}{% if show_mobile_slider %} slider--tablet grid--peek{% endif %}{% endif %}"
                      role="list"
                      aria-label="{{ 'general.slider.name' | t }}"
                    >
                      {%- for product in block.settings.collection.products limit: block.settings.products_to_show -%}
                        <li
                          id="Slide-{{ block.id }}-{{ forloop.index }}"
                          class="grid__item{% if show_mobile_slider or show_desktop_slider %} slider__slide{% endif %}{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
                          {% if settings.animations_reveal_on_scroll %}
                            data-cascade
                            style="--animation-order: {{ forloop.index }};"
                          {% endif %}
                        >
                          {%
                            render 'card-product-v2',
                            card_product: product,
                            media_aspect_ratio: block.settings.image_ratio,
                            image_shape: block.settings.image_shape,
                            show_secondary_image: block.settings.show_secondary_image,
                            show_vendor: block.settings.show_vendor,
                            show_rating: block.settings.show_rating,
                            show_quick_add: block.settings.enable_quick_add,
                            section_id: block.id,
                            colour_as_title: block.settings.colour_as_title,
                            show_type: block.settings.show_type,
                            badge_style: block.settings.badge_style,
                            display_low_inventory: block.settings.display_low_inventory,
                            low_inventory: block.settings.low_inventory | times: 1
                          %}
                        </li>
                      {%- endfor -%}
                    </ul>
                    {%- if show_mobile_slider or show_desktop_slider -%}
                      <div class="slider-buttons no-js-hidden">
                        <button
                          type="button"
                          class="slider-button slider-button--prev"
                          name="previous"
                          aria-label="{{ 'general.slider.previous_slide' | t }}"
                          aria-controls="Slider-{{ section.id }}"
                        >
                          {% render 'icon-caret' %}
                        </button>
                        <div class="slider-counter caption visually-hidden">
                          <span class="slider-counter--current">1</span>
                          <span aria-hidden="true"> / </span>
                          <span class="visually-hidden">{{ 'general.slider.of' | t }}</span>
                          <span class="slider-counter--total">{{ products_to_display }}</span>
                        </div>
                        <button
                          type="button"
                          class="slider-button slider-button--next"
                          name="next"
                          aria-label="{{ 'general.slider.next_slide' | t }}"
                          aria-controls="Slider-{{ section.id }}"
                        >
                          {% render 'icon-caret' %}
                        </button>
                      </div>
                    {%- endif -%}
                  </slider-component>

                  {%- if block.settings.show_view_all and more_in_collection -%}
                    <div class="center collection__view-all{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}">
                      <a
                        href="{{ block.settings.collection.url }}"
                        class="{% if block.settings.view_all_style == 'link' %}link underlined-link{% elsif block.settings.view_all_style == 'solid' %}button{% else %}button button--secondary{% endif %}"
                        aria-label="{{ 'sections.featured_collection.view_all_label' | t: collection_name: section.settings.collection.title }}"
                      >
                        {{ 'sections.featured_collection.view_all' | t }}
                      </a>
                    </div>
                  {%- endif -%}
                </div>
              </template>
            {% when 'pulldown' %}
              <div
                class="pulldown-opener"
                role="button"
                tabindex="0"
                aria-expanded="false"
                aria-controls="PulldownElement-{{ section.id }}-{{ forloop.index }}"
                data-pulldown-id="PulldownElement-{{ section.id }}-{{ forloop.index }}"
              >
                {% assign img = block.settings.image %}
                <img
                  src="{{ img | image_url: width: 400 }}"
                  srcset="
                    {{ img | image_url: width: 320 }} 320w,
                    {{ img | image_url: width: 480 }} 480w,
                    {{ img | image_url: width: 768 }} 768w,
                    {{ img | image_url: width: 1024 }} 1024w,
                    {{ img | image_url: width: 1440 }} 1440w
                  "
                  sizes="(max-width: 749px) calc(50vw - 1.5rem), (max-width: 989px) calc(50vw - 5rem), (max-width: 1399px) 25vw, calc(25vw - 2.5rem)"
                  width="{{ img.width }}"
                  height="{{ img.height }}"
                  alt="{{ img.alt | escape }}"
                  loading="lazy"
                  decoding="async"
                >
              </div>

              <template id="PulldownElement-{{ section.id }}-{{ forloop.index }}">
                <div class="pulldown-content__inner page-width">
                  <p class="h2 center">{{ block.settings.pulldown.title }}</p>
                  <div class="center">{{ block.settings.pulldown.introduction | metafield_tag }}</div>

                  <ul
                    class="grid grid--{{ columns_desktop }}-col-desktop grid--{{ columns_mobile }}-col-tablet-down"
                    role="list"
                  >
                    {% for element in block.settings.pulldown.elements.value %}
                      <li class="grid__item">
                        <div class="pulldown__card card">
                          {% assign img = element.image %}
                          <img
                            src="{{ img | image_url: width: 400 }}"
                            srcset="
                              {{ img | image_url: width: 320 }} 320w,
                              {{ img | image_url: width: 480 }} 480w,
                              {{ img | image_url: width: 768 }} 768w,
                              {{ img | image_url: width: 1024 }} 1024w,
                              {{ img | image_url: width: 1440 }} 1440w
                            "
                            sizes="(max-width: 749px) calc(50vw - 1.5rem), (max-width: 989px) calc(50vw - 5rem), (max-width: 1399px) 25vw, calc(25vw - 2.5rem)"
                            width="{{ img.width }}"
                            height="{{ img.height }}"
                            alt="{{ img.alt | escape }}"
                            loading="lazy"
                            decoding="async"
                          >
                          <div class="pulldown__card-bottom">
                            <div>
                              <p class="h4">{{ element.title }}</p>
                              <ul>
                                {% for feature in element.features.value %}
                                  <li>{{ feature }}</li>
                                {% endfor %}
                              </ul>
                            </div>
                            {% if element.url.value %}
                              <a class="button button--secondary" href="{{ element.url.value }}">Filter Product</a>
                            {% endif %}
                          </div>
                        </div>
                      </li>
                    {% endfor %}
                  </ul>
                </div>
              </template>
            {% when 'url' %}
              <a href="{{ block.settings.url }}">
                {% assign img = block.settings.image %}
                <img
                  src="{{ img | image_url: width: 400 }}"
                  srcset="
                    {{ img | image_url: width: 320 }} 320w,
                    {{ img | image_url: width: 480 }} 480w,
                    {{ img | image_url: width: 768 }} 768w,
                    {{ img | image_url: width: 1024 }} 1024w,
                    {{ img | image_url: width: 1440 }} 1440w
                  "
                  sizes="(max-width: 749px) calc(50vw - 1.5rem), (max-width: 989px) calc(50vw - 5rem), (max-width: 1399px) 25vw, calc(25vw - 2.5rem)"
                  width="{{ img.width }}"
                  height="{{ img.height }}"
                  alt="{{ img.alt | escape }}"
                  loading="lazy"
                  decoding="async"
                >
              </a>
          {% endcase %}
        </li>
      {% endfor %}
    </ul>
  </div>
</pulldown-container>

{% comment %}
  <script>
    {% comment %} document.addEventListener('DOMContentLoaded', () => {
      const pulldownOpeners = document.querySelectorAll('.pulldown-opener');

      pulldownOpeners.forEach((opener) => {
        opener.addEventListener('click', () => {
          const grid = opener.closest('ul.main-grid');
          const columns =
            window.innerWidth < 990 ? parseInt(grid.dataset.columnsMobile) : parseInt(grid.dataset.columnsDesktop);
          const items = [...grid.querySelectorAll('.main-grid__item')];
          const openerItem = opener.closest('.main-grid__item');
          const index = items.indexOf(openerItem);
          const row = Math.floor(index / columns);
          const insertAfterIndex = Math.min((row + 1) * columns - 1, items.length - 1);

          // Remove any existing pulldown rows
          grid.querySelectorAll('.grid__item--pulldown').forEach((el) => el.remove());

          const pulldownId = opener.dataset.pulldownId;
          const contentEl = document.getElementById(pulldownId);
          if (!contentEl) return;

          const li = document.createElement('li');
          li.classList.add('grid__item', 'grid__item--pulldown');
          li.innerHTML = contentEl.innerHTML;

          items[insertAfterIndex].after(li);
        });
      });
    }); {% endcomment %}

    if (!customElements.get('pulldown-container')) {
      customElements.define(
        'pulldown-container',
        class PulldownContainer extends HTMLElement {
          constructor() {
            super();
          }

          connectedCallback() {
            this.init();
          }

          init() {
            this.mainContainer = this.querySelector('.main-grid');
            this.openers = [...this.mainContainer.querySelectorAll('.pulldown-opener')];

            this.openers.forEach(opener => {
              opener.addEventListener('click', this.openerClick.bind(this));
            });
          }

          openerClick(event) {
            const opener = event.target.closest(".pulldown-opener");
            const isOpen = opener.dataset.open ? true : false;

            if (isOpen) {
              this.clear(opener);
              return;
            }

            opener.dataset.open = true;

            const mobileColumns = parseInt(this.mainContainer.dataset.columnsMobile);
            const desktopColumns = parseInt(this.mainContainer.dataset.columnsDesktop);

            const columns = window.innerWidth < 990 ? mobileColumns : desktopColumns;
            const allItems = [...this.mainContainer.querySelectorAll('.main-grid__item')];
            const openerItem = opener.closest('.main-grid__item');
            const index = allItems.indexOf(openerItem);
            const row = Math.floor(index / columns);
            const insertAfterIndex = Math.min((row + 1) * columns - 1, items.length - 1);



            const pulldownId = opener.dataset.pulldownId;
            const contentEl = document.getElementById(pulldownId);
            if (!contentEl) return;

            const li = document.createElement('li');
            li.classList.add('grid__item', 'grid__item--pulldown');
            li.innerHTML = contentEl.innerHTML;

            allItems[insertAfterIndex].after(li);
          }

          clear(opener = false) {
            if(opener) opener.removeAttribute('data-open');

            // Remove any existing pulldown rows
            this.mainContainer.querySelectorAll('.grid__item--pulldown').forEach((el) => el.remove());
          }
        }
      );
    }
  </script>
{% endcomment %}

<script>
  if (!customElements.get('pulldown-container')) {
    customElements.define(
      'pulldown-container',
      class PulldownContainer extends HTMLElement {
        constructor() {
          super();
          this.abortController = new AbortController();
          this.activeOpener = null;
        }

        connectedCallback() {
          this.mainContainer = this.querySelector('.main-grid');
          if (!this.mainContainer) return;

          this.mainContainer.addEventListener('click', this.handleGridClick.bind(this), {
            signal: this.abortController.signal,
          });

          window.addEventListener('resize', this.handleResize.bind(this));
        }

        disconnectedCallback() {
          this.abortController.abort();
          window.removeEventListener('resize', this.handleResize.bind(this));
        }

        handleGridClick(event) {
          const opener = event.target.closest('.pulldown-opener');
          if (!opener) return;
          this.openerClick(opener);
        }

        openerClick(opener) {
          const isOpen = opener.getAttribute('aria-expanded') === 'true';

          this.clear();

          if (isOpen) return;

          this.activeOpener = opener;
          opener.setAttribute('aria-expanded', 'true');
          opener.setAttribute('data-open', 'true');

          const pulldownId = opener.dataset.pulldownId;
          opener.setAttribute('aria-controls', pulldownId);

          const template = document.getElementById(pulldownId);
          if (!template || !template.content) return;

          const mobileCols = parseInt(this.mainContainer.dataset.columnsMobile || '2', 10);
          const desktopCols = parseInt(this.mainContainer.dataset.columnsDesktop || '4', 10);
          const columns = window.innerWidth < 990 ? mobileCols : desktopCols;

          const items = [...this.mainContainer.querySelectorAll('.main-grid__item')];
          const openerItem = opener.closest('.main-grid__item');
          const index = items.indexOf(openerItem);
          const row = Math.floor(index / columns);
          const insertAfterIndex = Math.min((row + 1) * columns - 1, items.length - 1);

          const pulldownRow = document.createElement('li');
          pulldownRow.classList.add('grid__item', 'grid__item--pulldown');
          pulldownRow.appendChild(template.content.cloneNode(true));

          items[insertAfterIndex].after(pulldownRow);
        }

        handleResize() {
          if (!this.activeOpener) return;
          this.openerClick(this.activeOpener);
        }

        clear() {
          if (this.activeOpener) {
            this.activeOpener.removeAttribute('aria-expanded');
            this.activeOpener.removeAttribute('aria-controls');
            this.activeOpener.removeAttribute('data-open');
            this.activeOpener = null;
          }

          this.mainContainer?.querySelectorAll('.grid__item--pulldown')?.forEach((el) => el.remove());
        }
      }
    );
  }
</script>

{% schema %}
{
  "name": "Pulldown info grid",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [],
  "blocks": [
    {
      "type": "pulldown",
      "name": "Pulldown cards",
      "settings": [
        {
          "type": "image_picker",
          "label": "Image",
          "id": "image"
        },
        {
          "type": "metaobject",
          "id": "pulldown",
          "label": "Pulldown object",
          "metaobject_type": "pulldown_info_grid_element"
        }
      ]
    },
    {
      "type": "product-grid",
      "name": "Pulldown products",
      "settings": [
        {
          "type": "image_picker",
          "label": "Image",
          "id": "image"
        },
        {
          "type": "inline_richtext",
          "id": "title",
          "label": "Title"
        },
        {
          "type": "richtext",
          "id": "introduction",
          "label": "Introduction"
        },
        {
          "type": "collection",
          "id": "collection",
          "label": "t:sections.featured-collection.settings.collection.label"
        },
        {
          "type": "range",
          "id": "products_to_show",
          "min": 2,
          "max": 25,
          "step": 1,
          "default": 4,
          "label": "t:sections.featured-collection.settings.products_to_show.label"
        },
        {
          "type": "range",
          "id": "columns_desktop",
          "min": 1,
          "max": 5,
          "step": 1,
          "default": 4,
          "label": "t:sections.featured-collection.settings.columns_desktop.label"
        },
        {
          "type": "checkbox",
          "id": "show_view_all",
          "default": true,
          "label": "t:sections.featured-collection.settings.show_view_all.label"
        },
        {
          "type": "select",
          "id": "view_all_style",
          "label": "t:sections.featured-collection.settings.view_all_style.label",
          "options": [
            {
              "value": "link",
              "label": "t:sections.featured-collection.settings.view_all_style.options__1.label"
            },
            {
              "value": "outline",
              "label": "t:sections.featured-collection.settings.view_all_style.options__2.label"
            },
            {
              "value": "solid",
              "label": "t:sections.featured-collection.settings.view_all_style.options__3.label"
            }
          ],
          "default": "solid"
        },
        {
          "type": "checkbox",
          "id": "enable_desktop_slider",
          "label": "t:sections.featured-collection.settings.enable_desktop_slider.label",
          "default": false
        },
        {
          "type": "header",
          "content": "t:sections.featured-collection.settings.header.content"
        },
        {
          "type": "select",
          "id": "image_ratio",
          "options": [
            {
              "value": "adapt",
              "label": "t:sections.featured-collection.settings.image_ratio.options__1.label"
            },
            {
              "value": "portrait",
              "label": "t:sections.featured-collection.settings.image_ratio.options__2.label"
            },
            {
              "value": "square",
              "label": "t:sections.featured-collection.settings.image_ratio.options__3.label"
            }
          ],
          "default": "adapt",
          "label": "t:sections.featured-collection.settings.image_ratio.label"
        },
        {
          "type": "select",
          "id": "image_shape",
          "options": [
            {
              "value": "default",
              "label": "t:sections.all.image_shape.options__1.label"
            },
            {
              "value": "blob",
              "label": "t:sections.all.image_shape.options__3.label"
            },
            {
              "value": "chevronleft",
              "label": "t:sections.all.image_shape.options__4.label"
            },
            {
              "value": "chevronright",
              "label": "t:sections.all.image_shape.options__5.label"
            },
            {
              "value": "diamond",
              "label": "t:sections.all.image_shape.options__6.label"
            },
            {
              "value": "parallelogram",
              "label": "t:sections.all.image_shape.options__7.label"
            },
            {
              "value": "round",
              "label": "t:sections.all.image_shape.options__8.label"
            }
          ],
          "default": "default",
          "label": "t:sections.all.image_shape.label",
          "info": "t:sections.all.image_shape.info"
        },
        {
          "type": "checkbox",
          "id": "show_secondary_image",
          "default": false,
          "label": "t:sections.featured-collection.settings.show_secondary_image.label"
        },
        {
          "type": "checkbox",
          "id": "colour_as_title",
          "default": false,
          "label": "Use colour as title",
          "info": "Uses metafield Colour Name, if empty title will be used instead."
        },
        {
          "type": "checkbox",
          "id": "show_type",
          "default": false,
          "label": "Show type"
        },
        {
          "type": "checkbox",
          "id": "show_vendor",
          "default": false,
          "label": "t:sections.featured-collection.settings.show_vendor.label"
        },
        {
          "type": "checkbox",
          "id": "show_rating",
          "default": false,
          "label": "t:sections.featured-collection.settings.show_rating.label",
          "info": "t:sections.featured-collection.settings.show_rating.info"
        },
        {
          "type": "checkbox",
          "id": "enable_quick_add",
          "default": false,
          "label": "t:sections.featured-collection.settings.enable_quick_buy.label"
        },
        {
          "type": "header",
          "content": "Badge settings"
        },
        {
          "type": "select",
          "id": "badge_style",
          "options": [
            {
              "value": "float",
              "label": "Float"
            },
            {
              "value": "fixed",
              "label": "Fixed"
            }
          ],
          "default": "float",
          "label": "Badge style"
        },
        {
          "type": "checkbox",
          "id": "display_low_inventory",
          "default": false,
          "label": "Display low inventory badge"
        },
        {
          "type": "range",
          "id": "low_inventory",
          "min": 0,
          "max": 10,
          "step": 1,
          "unit": "un",
          "label": "Low inventory quantity",
          "default": 5
        },
        {
          "type": "header",
          "content": "t:sections.featured-collection.settings.header_mobile.content"
        },
        {
          "type": "select",
          "id": "columns_mobile",
          "default": "2",
          "label": "t:sections.featured-collection.settings.columns_mobile.label",
          "options": [
            {
              "value": "1",
              "label": "t:sections.featured-collection.settings.columns_mobile.options__1.label"
            },
            {
              "value": "2",
              "label": "t:sections.featured-collection.settings.columns_mobile.options__2.label"
            }
          ]
        },
        {
          "type": "checkbox",
          "id": "swipe_on_mobile",
          "default": false,
          "label": "t:sections.featured-collection.settings.swipe_on_mobile.label"
        }
      ]
    },
    {
      "type": "url",
      "name": "Url element",
      "settings": [
        {
          "type": "image_picker",
          "label": "Image",
          "id": "image"
        },
        {
          "type": "url",
          "id": "url",
          "label": "Url link"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Pulldown info grid"
    }
  ]
}
{% endschema %}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}

<style>
  .interative-table-section table {
    width: 100%;
    max-width: 768px;
    margin: 0 auto;
    font-size: 1rem;
  }

  @media screen and (min-width: 750px) {
    .interative-table-section table {
      font-size: 1.3rem;
    }
  }

  .interative-table-section tbody tr td:not(:first-of-type) {
    text-align: center;
  }

  .interative-table-section tbody tr td .icon {
    height: 1.5em;
    vertical-align: middle;
  }

  .interative-table-section tr > th {
    padding: 0;
  }
</style>

<style>
  .custom-select {
    position: relative;
    display: inline-block;
    width: 100%;
  }

  .custom-select__trigger {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-family: inherit;
    width: 100%;
    background-color: var(--gradient-background);
    border-radius: 0;
    cursor: pointer;
    white-space: normal;
    padding: 1em;
    box-sizing: border-box;
    text-align: left;
    position:relative;
    border:0;
    color:inherit;
  }

  .custom-select__trigger {
    font-size: 1rem; /* or inherit */
  }

  @media screen and (min-width: 750px) {
    .custom-select__trigger {
      font-size: 1.3rem;
    }
  }

  {% comment %} .custom-select__trigger:hover,
  .custom-select__trigger.clicked {
    border: 0.2rem solid rgba(var(--color-foreground), 0.2);
  } {% endcomment %}

  .custom-select__trigger:hover::after,
  .custom-select__trigger.clicked::after {
    content: "";              /* You must set content for ::after to show */
    position: absolute;
    bottom: 4px;
    left: 50%;               /* Start at 50% */
    transform: translateX(-50%);                 /* add left to position correctly */
    width: calc(100% - 2em);
    border: .1rem solid rgba(var(--color-foreground),.2);
    pointer-events: none;     /* so it doesn’t block clicks */
    box-sizing: border-box;   /* ensure border doesn’t overflow */
    padding: 0 1em;
  }

  .custom-select__icon {
    transition: transform 0.3s ease; /* smooth rotation */
    transform-origin: center; /* rotate around center */
  }

  .custom-select__trigger.clicked .custom-select__icon {
    transform: rotate(180deg);
  }

  .custom-select__options {
    position: absolute;
    z-index: 10;
    top: 100%;
    left: 0;
    right: 0;
    margin-top: 4px;
    background: var(--gradient-background);
    border: 0.2rem solid rgba(var(--color-foreground), 0.2);
    border-radius: 0;
    list-style: none;
    padding: 0;
    max-height: 200px;
    overflow-y: auto;
  }

  .custom-select__options li {
    padding: 0.75rem;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
    text-align: left;
    line-height: 1em;
  }

  .custom-select__options li:hover,
  .custom-select__options li.selected {
    background-color: #f7f7f7;
  }
</style>

<div class="color-{{ section.settings.color_scheme }} gradient">
  <div class="page-width section-{{ section.id }}-padding page-width">
    <interactive-table>
      <table>
        <thead>
          <tr>
            <th><span>Extensions</span></th>
            <th class="">
              <custom-select class="select_select custom-select" data-selected="">
                <button class="custom-select__trigger" aria-haspopup="listbox" aria-expanded="false">
                  <span class="custom-select__label">Wrap Ponytail</span>
                  <svg class="custom-select__icon" viewBox="0 0 24 24" width="16" height="16">
                    <polyline points="6 9 12 15 18 9" stroke="currentColor" stroke-width="2" fill="none" />
                  </svg>
                </button>
                <ul class="custom-select__options" role="listbox" hidden>
                  <li selected>Test 1</li>
                  <li>Test 2</li>
                  <li>Test 3</li>
                </ul>
              </custom-select>
            </th>
            <th class="">
              <custom-select class="select_select custom-select">
                <button class="custom-select__trigger" aria-haspopup="listbox" aria-expanded="false">
                  <span class="custom-select__label">Wrap Ponytail</span>
                  <svg class="custom-select__icon" viewBox="0 0 24 24" width="16" height="16">
                    <polyline points="6 9 12 15 18 9" stroke="currentColor" stroke-width="2" fill="none" />
                  </svg>
                </button>
                <ul class="custom-select__options" role="listbox" hidden>
                  <li selected>Test 1</li>
                  <li>Test 2</li>
                  <li>Test 3</li>
                </ul>
              </custom-select>
            </th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
      <div class="hidden check-mark-container" aria-hidden="true">
        {% render 'icon-checkmark' %}
      </div>
      <script type="application/json">
        {{ section.settings.options.values }}
      </script>
    </interactive-table>
  </div>
</div>

<script>
  if (!customElements.get('custom-select')) {
    customElements.define(
      'custom-select',
      class CustomSelect extends HTMLElement {
        constructor() {
          super();
          this.selectedValue = this.getAttribute('data-selected') || '';
          this.label = this.querySelector('.custom-select__label');
          this.options = this.querySelector('ul');
          this.trigger = this.querySelector('button');

          this.init();
        }

        init() {
          this.trigger.addEventListener('click', (e) => {
            e.preventDefault();
            this.open();
          });

          document.addEventListener('click', this.handleOutsideClick.bind(this));
        }

        open() {
          const expanded = this.trigger.getAttribute('aria-expanded') === 'true';
          this.trigger.setAttribute('aria-expanded', !expanded);
          this.trigger.classList.add('clicked');
          this.options.hidden = expanded;
        }

        close() {
          this.options.hidden = true;
          this.trigger.setAttribute('aria-expanded', false);
          this.trigger.classList.remove('clicked');
        }

        select(element) {
          const selectedValue = element.getAttribute('data-value');
          this.selectedValue = selectedValue;
          this.dataset.selected = selectedValue;
          this.label.innerText = element.innerText;

          this.options.querySelectorAll('li').forEach((li) => li.classList.remove('selected'));
          element.classList.add('selected');

          this.close();

          this.dispatchEvent(
            new CustomEvent('selection-changed', {
              detail: { value: selectedValue },
              bubbles: true,
            })
          );
        }

        populateOptions(items, selectedIndex = 0) {
          if (!items) return;

          this.options.innerHTML = '';

          items.forEach((item, i) => {
            const listElement = document.createElement('li');
            listElement.dataset.value = item.value;
            listElement.innerText = item.name;
            listElement.role = 'option';

            if (i === selectedIndex) {
              listElement.classList.add('selected');
              this.setAttribute('data-selected', item.value);
              this.selectedValue = item.value;
              this.label.innerText = item.name;
            }

            listElement.addEventListener('click', () => this.select(listElement));

            this.options.appendChild(listElement);
          });
        }

        handleOutsideClick(e) {
          if (!this.contains(e.target)) {
            this.close();
          }
        }
      }
    );
  }

  if (!customElements.get('interactive-table')) {
    customElements.define(
      'interactive-table',
      class InteractiveTable extends HTMLElement {
        constructor() {
          super();
          this.options = JSON.parse(this.querySelector('script[type="application/json"]').textContent);
          this.table = this.querySelector('table');
          this.selects = this.querySelectorAll('custom-select');
          this.checkmarkIcon = this.querySelector('.check-mark-container');
          this.init();
        }

        init() {
          this.showLoading();

          this.createMainTable(); // updates header and body structure
          this.populateTable(); // fills table with actual content

          this.selects.forEach((select) => {
            select.addEventListener('selection-changed', (e) => {
              this.populateTable();
            });
          });

          this.hideLoading(); // skeleton disappears naturally
        }

        createMainTable() {
          this.updateTableHeader();
          this.updateTableBody();
        }

        populateTable() {
          const selectedValues = Array.from(this.selects).map((select) => select.dataset.selected);
          const rows = this.table.querySelectorAll('tbody tr');

          rows.forEach((row, index) => {
            const cells = row.querySelectorAll('td');
            for (let i = 0; i < selectedValues.length; i++) {
              const cell = cells[i + 1]; // skip the first cell which is for features
              const value =
                this.options[selectedValues[i]].features[Object.keys(this.options[selectedValues[i]].features)[index]];

              if (this.checkmarkIcon) {
                cell.innerHTML = value ? this.checkmarkIcon.innerHTML : '';
              } else {
                cell.textContent = value || ''; // set the cell content or empty if no value
              }
            }
          });
        }

        updateTableHeader() {
          this.populateSelectOptions();
        }

        updateTableBody() {
          const tableBody = this.table.querySelector('tbody');
          const columns = this.selects.length + 1; // considering the fist column for features

          // features available in the first option
          const featuresObj = Object.values(this.options)[0].features;
          const features = Object.keys(featuresObj);

          tableBody.innerHTML = ''; // clear existing rows

          features.forEach((feature) => {
            const row = document.createElement('tr');
            for (let i = 0; i < columns; i++) {
              const cell = document.createElement('td');
              if (i == 0) {
                cell.textContent = feature; // first column is the feature name
              }
              row.appendChild(cell);
            }
            tableBody.appendChild(row);
          });
        }

        populateSelectOptions() {
          const selectsOptions = this.getValuesAndNames();

          for (let i = 0; i < this.selects.length; i++) {
            this.selects[i].populateOptions(selectsOptions, i);
          }
        }

        getValuesAndNames() {
          const selectsOptions = [];
          for (const [key, value] of Object.entries(this.options)) {
            selectsOptions.push({
              value: key,
              name: value.name,
            });
          }

          return selectsOptions;
        }

        renderSkeletonTable() {
          const tableBody = this.table.querySelector('tbody');
          const columns = this.selects.length + 1; // +1 for the feature name column

          // Use first available option to infer number of rows
          const firstKey = Object.keys(this.options)[0];
          const features = Object.keys(this.options[firstKey].features);

          tableBody.innerHTML = ''; // Clear existing content

          features.forEach(() => {
            const row = document.createElement('tr');
            for (let i = 0; i < columns; i++) {
              const cell = document.createElement('td');
              cell.classList.add('skeleton-cell');
              row.appendChild(cell);
            }
            tableBody.appendChild(row);
          });
        }

        showLoading() {
          this.setAttribute('aria-busy', 'true');
          this.renderSkeletonTable();
        }

        hideLoading() {
          this.setAttribute('aria-busy', 'false');
        }

        selectElementClick(event) {
          const clickedElement = event.target;
          const parentElement = clickedElement.closest('custom-select');

          const selectLabel = parentElement.querySelector('.custom-select__label');
          const value = clickedElement.dataset.value;
          const text = clickedElement.textContent.trim();

          selectLabel.textContent = text;
          parentElement.dataset.selected = value;

          parentElement.querySelectorAll('li').forEach((li) => li.classList.remove('selected'));
          clickedElement.classList.add('selected');

          clickedElement.closest('.custom-select__options').hidden = true;
          parentElement.querySelector('.custom-select__trigger').setAttribute('aria-expanded', 'false');

          // Trigger external callback here if needed
          this.populateTable();
        }
      }
    );
  }
</script>

{% schema %}
{
  "name": "Comparison Table",
  "tag": "section",
  "class": "section interative-table-section",
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "default": "background-1"
    },
    {
      "type": "metaobject",
      "id": "options",
      "label": "Material",
      "metaobject_type": "hair_extensions_features"
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 40
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 52
    }
  ],
  "presets": [
    {
      "name": "Comparison Table",
      "category": "Custom"
    }
  ]
}
{% endschema %}

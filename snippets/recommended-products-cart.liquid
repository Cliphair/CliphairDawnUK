{{ 'component-recommended-products.css' | asset_url | stylesheet_tag }}
{{ 'section-collection-list.css' | asset_url | stylesheet_tag }}
{{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'component-slider.css' | asset_url | stylesheet_tag }}

{{ 'quick-add.css' | asset_url | stylesheet_tag }}
<script src="{{ 'quick-add.js' | asset_url }}" defer="defer"></script>
<script src="{{ 'product-form.js' | asset_url }}" defer="defer"></script>

{% liquid
  assign product_handles = 'quench-the-thirst-deep-moisture-shampoo,quench-the-thirst-deep-moisture-conditioner,quench-the-thirst-deep-conditioning-hair-mask,cliphair-silky-hair-spray,cliphair-heat-spray,hair-extension-hanger-and-carrier-bag,hair-extension-holder,detangling-hair-brush,wave-comb-and-pouch,pintail-comb,alligator-clips,'
  assign cart_product_handles = ''

  for item in cart.items
    assign product = item.product

    if product.type == 'Tape in Hair Extensions'
      assign product_handles = product_handles | append: 'tape-in-hair-extensions-remover,spare-tape-pack-for-tape-in-extensions,'
    endif

    if product.type == 'Nano Ring Hair Extensions' or product.type == 'Remy Royale Nano Bonds'
      assign product_handles = product_handles | append: 'silicone-lined-nano-rings-beads-200-pack,'
    endif

    if product.metafields.custom.colour_group == 'Blondes'
      assign product_handles = product_handles | append: 'silver-lining-purple-toning-shampoo,'
    endif

    assign cart_product_handles = cart_product_handles | append: product.handle | append: ','
    assign product_handles = product_handles | remove_first: product.handle | append: ','
  endfor

  assign recommended_products_handles_list = product_handles | replace: ',,', ',' | split: ',' | uniq
  assign products_to_display = recommended_products_handles_list.size

  assign columns_mobile_int = 2 | plus: 0
  assign show_mobile_slider = false
  if products_to_display > columns_mobile_int
    assign show_mobile_slider = true
  endif

  assign columns_desktop_int = 2 | plus: 0
  assign show_desktop_slider = false
  if products_to_display > columns_desktop_int
    assign show_desktop_slider = true
  endif
%}

<div
  id="recommended-products-cart-title"
  class="color-{{ color_scheme }} gradient scroll-to-bottom"
  onclick="scrollToBottomSmooth(this)"
>
  <div class="title-wrapper title-wrapper--no-margin">
    <p class="title inline-richtext h3">
      {{ section.settings.title | default: 'You Might Also Like' }}
    </p>
    {% render 'icon-caret' %}
  </div>
</div>
<div id="recommended-products-cart" class="color-{{ color_scheme }} gradient">
  <slider-component
    aria-hidden="true"
    class=" slider-mobile-gutter{% if show_mobile_slider == false %} page-width{% endif %}{% if show_desktop_slider %} slider-component-desktop{% endif %}"
  >
    <ul
      id="Slider-recommended-products-cart"
      class="grid product-grid contains-card contains-card--product{% if settings.card_style == 'standard' %} contains-card--standard{% endif %} grid--{{ columns_desktop_int }}-col-desktop grid--{{ columns_mobile_int }}-col-tablet-down slider slider--desktop slider--tablet grid--peek"
      role="list"
      aria-label="{{ 'general.slider.name' | t }}"
    >
      {%- for product_handle in recommended_products_handles_list -%}
        {% assign cleaned_handle = product_handle | strip %}
        {% assign product = all_products[cleaned_handle] %}

        {% if product and cleaned_handle != '' %}
          <li
            id="Slide-recommended-products-cart-{{ forloop.index }}"
            class="grid__item slider__slide"
          >
            {% render 'card-product-no-headings',
              card_product: product,
              media_aspect_ratio: 'square',
              show_rating: true,
              section_id: 'recommended-products-cart'
            %}
          </li>
        {% endif %}
      {%- endfor -%}
    </ul>
    {%- if show_mobile_slider or show_desktop_slider -%}
      <div class="slider-buttons no-js-hidden">
        <button
          type="button"
          class="slider-button slider-button--prev"
          name="previous"
          aria-label="{{ 'general.slider.previous_slide' | t }}"
          aria-controls="Slider-recommended-products-cart"
        >
          {% render 'icon-caret' %}
        </button>
        <div class="slider-counter caption visually-hidden">
          <span class="slider-counter--current">1</span>
          <span aria-hidden="true"> / </span>
          <span class="visually-hidden">{{ 'general.slider.of' | t }}</span>
          <span class="slider-counter--total">{{ products_to_display }}</span>
        </div>
        <button
          type="button"
          class="slider-button slider-button--next"
          name="next"
          aria-label="{{ 'general.slider.next_slide' | t }}"
          aria-controls="Slider-recommended-products-cart"
        >
          {% render 'icon-caret' %}
        </button>
      </div>
    {%- endif -%}
  </slider-component>
</div>

<script>
  function scrollToBottomSmooth(element) {
    const parent = element.parentElement;
    const prevSibling = element.previousElementSibling;

    let extraSpace = 0;

    if (prevSibling) {
      const style = getComputedStyle(prevSibling);
      console.log('marginBottom:', style.marginBottom);
      extraSpace = parseFloat(style.marginBottom) || 0;
    } else {
      console.log('No previous sibling found.');
    }

    parent.scrollTo({
      top: parent.scrollHeight + extraSpace,
      behavior: 'smooth',
    });
  }

  function shuffleProducts(array) {
    const shuffled = array.slice();

    // Store original IDs before shuffling
    const originalIds = shuffled.map((el) => el.id);

    // Shuffle the array using Fisher-Yates algorithm
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }

    // Reassign original IDs to new order (swap IDs between elements)
    shuffled.forEach((el, idx) => {
      el.id = originalIds[idx];
    });

    return shuffled;
  }

  function shuffleRecommendedProducts() {
    const container = document.querySelector('#Slider-recommended-products-cart');
    const loadingSpinner = document.querySelector('#recommended-products-cart .loading-overlay');

    if (!container || !container.children.length) return;

    // Shuffle logic
    const elements = Array.from(container.children);
    const shuffled = shuffleProducts(elements);

    container.innerHTML = '';
    shuffled.forEach((el) => container.appendChild(el));

    // Handle class changes
    if (loadingSpinner) loadingSpinner.classList.add('hidden');
    const parent = container.parentElement;
    if (parent && typeof parent.resetSlider === 'function') {
      parent.resetSlider();
    }
    parent.classList.remove('visually-hidden');
    parent.removeAttribute('aria-hidden');
  }

  // Initialize when drawer is opened
  document.addEventListener('DOMContentLoaded', () => {
    shuffleRecommendedProducts();
  });
</script>

{% comment %}
  <script>
    async function fetchProductCard(handle, index) {
      const res = await fetch(
        window.Shopify.routes.root + `?section_id=product-recommendation-card-render&handle=${handle}&index=${index}`
      );
      const html = await res.text();

      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      console.log(`Rendering product card for handle: ${handle}`);
      console.log(`Response HTML: ${html}`);
      return doc.querySelector('li'); // The <li> from the section
    }

    async function renderRecommendedProducts(handles) {
      const container = document.querySelector('#Slider-recommended-products-cart');
      if (!container || !handles || handles.length === 0) return;

      const shuffled = handles.sort(() => 0.5 - Math.random()).slice(0, 4);
      container.innerHTML = '';

      for (let i = 0; i < shuffled.length; i++) {
        const li = await fetchProductCard(shuffled[i], i);
        if (li) container.appendChild(li);
      }
    }

    // Initialize when drawer is opened
    document.addEventListener('DOMContentLoaded', () => {
      const handleData = document.querySelector('#recommended-products-cart');
      if (handleData) {
        const handles = handleData.dataset.handles.split(',').filter(Boolean);
        renderRecommendedProducts(handles);
      }
    });
  </script>
{% endcomment %}
